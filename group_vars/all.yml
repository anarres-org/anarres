---

## You must fill the empty variables

# Common

base_domain:
tor_hostname:
data_path: /data

user_uid_1000:
group_gid_1000: "{{ user_uid_1000 }}"

user_uid_33: www-data
group_gid_33: "{{ user_uid_33 }}"

ca_certs_path: /etc/ssl/certs/ca-certificates.crt

docker_db_image: mariadb:latest
docker_db_postgres_image: postgres:latest
dockerfiles_path: /root/dockerfiles

## Following values will be used for the root account of every docker database
db_pass:
db_config_port: 3306

sendxmpp_jid: "{{ user_uid_1000 }}@{{ prosody_domain }}"
sendxmpp_pass:

## anarres-sec

ssh_port: 2222
admin_xmpp:

## Web and Let's Encrypt

nginx_processes: auto
web_ports_http: 80
web_ports_https: 443

web_path: /var/www

web_path_letsencrypt: "{{ web_path }}/letsencrypt"
web_path_default: "{{ web_path }}/default"

## Registry

registry_domain: "registry.{{ base_domain }}"
registry_docker_image: registry:2

registry_directory:
  data: "{{ data_path }}/registry/data"

registry_internal_web_port: 5000

registry_user:
registry_pass:

## CoreOS Clair

clair_docker_image: quay.io/coreos/clair:latest
clair_db_image: "{{ docker_db_postgres_image }}"
clair_internal_ports: 6060-6061
clair_db_service_name: clair-db
clair_update_interval: 24h

clair_directory:
  conf: "{{ data_path }}/clair/conf"
  db: "{{ data_path }}/clair/db"

clair_db_name: clair
clair_db_user: clair
clair_db_user_pass:

## Registry web interface

registry_web_interface_domain: "r.{{ base_domain }}"
registry_web_interface_docker_image: jessfraz/reg

registry_web_interface_internal_web_port: 4080

registry_web_interface_enable_clair: true

registry_web_interface_registry_url: "https://{{ registry_domain }}"
registry_web_interface_registry_user: "{{ registry_user }}"
registry_web_interface_registry_pass: "{{ registry_pass }}"

## OpenLDAP

openldap_domain: "{{ base_domain }}"
openldap_docker_image: osixia/openldap:1.2.4
openldap_port_secure: 636

openldap_directory:
  data: "{{ data_path }}/openldap/data"
  conf: "{{ data_path }}/openldap/conf"

openldap_organization:  # Example: anarres
openldap_base_DN:  # Example: dc=anarres,dc=local
openldap_admin_password:
openldap_readonly_password:

## OpenLDAP for services

openldap_server_protocol: 'ldaps://'
openldap_server_domain: "{{ base_domain }}"
openldap_server_port: 636
openldap_server_uri: "{{ openldap_server_protocol }}{{ openldap_server_domain }}:{{ openldap_server_port }}"
openldap_validate_certs: true
openldap_bind_dn: "cn=readonly,{{ openldap_base_DN }}"
openldap_bind_credentials: "{{ openldap_readonly_password }}"
openldap_search_base: "ou=users,{{ openldap_base_DN }}"

## phpLDAPadmin

phpldapadmin_domain: "ldap.{{ base_domain }}"
phpldapadmin_docker_image: osixia/phpldapadmin:0.8.0
phpldapadmin_internal_web_port: 4002

phpldapadmin_ldap_hosts: "#PYTHON2BASH:[{'openldap': [{'server': [{'tls': True}]},{'login': [{'bind_id': 'cn=admin,{{ openldap_base_DN }}'}]}]}]"

## Prosody

prosody_docker_image: unclev/prosody-docker-extended:0.11
prosody_domain: "{{ base_domain }}"
prosody_domain_muc: "conference.{{ prosody_domain }}"
prosody_domain_upload: "upload.{{ prosody_domain }}"

prosody_enable_muc: true
prosody_enable_http_upload: false
prosody_enable_http: "{{ prosody_enable_http_upload }}"
prosody_enable_tor: false
prosody_tor_hostname: "{{ tor_hostname }}"

prosody_directory:
  conf: "{{ data_path }}/prosody/conf"
  data: "{{ data_path }}/prosody/data"
  modules_community: "{{ data_path }}/prosody/modules-community"
  modules_custom: "{{ data_path }}/prosody/modules-custom"

prosody_cert_path:
  privkey: "/etc/letsencrypt/live/{{ prosody_domain }}/privkey.pem"
  cert: "/etc/letsencrypt/live/{{ prosody_domain }}/fullchain.pem"

prosody_port_c2s: 5222
prosody_port_s2s: 5269
prosody_port_internal_http: 5280
prosody_port_external_https: 5281

prosody_iptables_c2s_rule: "-A INPUT -p tcp -m state --state NEW -m tcp --dport {{ prosody_port_c2s }} -j ACCEPT"
prosody_iptables_s2s_rule: "-A INPUT -p tcp -m state --state NEW -m tcp --dport {{ prosody_port_s2s }} -j ACCEPT"
prosody_iptables_https_rule: |
  -A INPUT -p tcp -m state --state NEW -m tcp --dport {{ prosody_port_external_https }} -j ACCEPT

prosody_admins_xmpp:
  - "admin@{{ prosody_domain }}"
prosody_allow_remote_registration: false
prosody_users:
  - jid: "{{ prosody_admins_xmpp.0 }}"
    pass:
  - jid: "{{ sendxmpp_jid }}"
    pass: "{{ sendxmpp_pass }}"

## Gitea

gitea_domain: "git.{{ base_domain }}"
gitea_docker_image: gitea/gitea:1

### DB

gitea_db_service_name: gitea-db
gitea_db_name: gitea
gitea_db_user: gitea
gitea_db_user_pass:

gitea_directory:
  data: "{{ data_path }}/gitea/data"
  db: "{{ data_path }}/gitea/db"
  conf: "{{ data_path }}/gitea/data/gitea/conf"
  git_data: "{{ data_path }}/gitea/data/git"
  ssh_data: "{{ data_path }}/gitea/data/ssh"

gitea_ssh_port: 22
gitea_internal_web_port: 3000
gitea_network: "gitea"

## Drone

drone_docker_image: drone/drone:1
drone_internal_web_port: 3030
drone_domain: "drone.{{ base_domain }}"

drone_directory:
  data: "{{ data_path }}/drone/data"

## Drone for GitHub

drone_github_docker_image: drone/drone:1
drone_github_internal_web_port: 3031
drone_github_domain: "drone-github.{{ base_domain }}"

drone_github_directory:
  data: "{{ data_path }}/drone_github/data"

drone_github_client_id:
drone_github_client_secret:

## CodiMD

codimd_docker_image: hackmdio/hackmd:1-alpine
codimd_domain: "codimd.{{ base_domain }}"
codimd_web_port: 3040
codimd_network_name: "codimd"

codimd_directory:
  db: "{{ data_path }}/codimd/db"
  uploads: "{{ data_path }}/codimd/uploads"

### DB

codimd_db_image: "{{ docker_db_postgres_image }}"
codimd_db_service_name: codimd-db
codimd_db_user: "codimd"
codimd_db_user_pass:
codimd_db_name: "codimd"

### LDAP

codimd_enable_ldap: true
codimd_ldap_url: "{{ openldap_server_uri }}"
codimd_ldap_bind_dn: "{{ openldap_bind_dn }}"
codimd_ldap_bind_credentials: "{{ openldap_bind_credentials }}"
codimd_ldap_search_base: "{{ openldap_search_base }}"
codimd_ldap_search_filter: "{{ '(uid={{username}})' }}"
codimd_ldap_search_attributes: 'uid, mail'
codimd_ldap_user_field: 'uid'
codimd_ldap_user_name_field: 'uid'

## Transmission

transmission_domain: "torrent.{{ base_domain }}"
transmission_docker_image: linuxserver/transmission:163
transmission_internal_web_port: 9091
transmission_peer_port: 51413

transmission_user:
transmission_pass:

transmission_directory:
  conf: "{{ data_path }}/transmission/conf"
  downloads: "{{ data_path }}/transmission/downloads"
  watch: "{{ data_path }}/transmission/watch"

transmission_timezone:  # Example: Europe/Berlin

## Transmission-OpenVPN

transmission_openvpn_domain: "tvpn.{{ base_domain }}"
transmission_openvpn_docker_image: haugene/transmission-openvpn:latest-alpine
transmission_openvpn_internal_web_port: 9091

transmission_openvpn_dns: 1.1.1.1

transmission_openvpn_vpn:
  provider:
  conf:
  user:
  pass:

transmission_openvpn_rpc:
  user:
  pass:

transmission_openvpn_directory:
  data: "{{ data_path }}/transmission_openvpn/data"

transmission_openvpn_extra_env:
  - TRANSMISSION_RATIO_LIMIT_ENABLED=false
  - TRANSMISSION_RATIO_LIMIT=10

## Wallabag

wallabag_domain: "wallabag.{{ base_domain }}"
wallabag_docker_image: wallabag/wallabag:2.3.8

wallabag_directory:
  db: "{{ data_path }}/wallabag/db"
  images: "{{ data_path }}/wallabag/images"

### DB

wallabag_db_service_name: wallabag-db
wallabag_db_name: wallabag
wallabag_db_user: wallabag
wallabag_db_user_pass:

wallabag_internal_web_port: 4000

## Selfoss

selfoss_domain: "selfoss.{{ base_domain }}"
selfoss_docker_image: hardware/selfoss:latest

selfoss_path_data: "{{ data_path }}/selfoss/data"

selfoss_internal_web_port: 4001


## Syncthing

syncthing_domain: "syncthing.{{ base_domain }}"
syncthing_docker_image: syncthing/syncthing:latest
syncthing_directory:
  conf: "{{ data_path }}/syncthing/config"
  data: "{{ data_path }}/syncthing"

syncthing_internal_web_port: 8384
syncthing_listening_port: 22000
syncthing_discovery_port: 21027

## OpenVPN

openvpn_iptables_p2p_rule: "-A INPUT -p {{ openvpn_protocol }} -m state --state NEW -m {{ openvpn_protocol }} --dport {{ openvpn_port }} -j ACCEPT"
openvpn_confiure_docker_command: "docker run -v {{ openvpn_directory.conf }}:/etc/openvpn --rm {{ openvpn_docker_image }} ovpn_genconfig -u {{ openvpn_protocol }}://{{ openvpn_domain }}"
openvpn_create_ca_command: "docker run -v {{ openvpn_directory.conf }}:/etc/openvpn --rm -it {{ openvpn_docker_image }} ovpn_initpki"

openvpn_domain: "openvpn.{{ base_domain }}"
openvpn_docker_image: kylemanna/openvpn:latest

openvpn_directory:
  conf: "{{ data_path }}/openvpn/conf"

openvpn_port: 1194
openvpn_protocol: udp

openvpn_ca_pass:
openvpn_ca_CN: "{{ openvpn_domain }}"

## Radicale

radicale_domain: "radicale.{{ base_domain }}"
radicale_docker_image: tomsquest/docker-radicale:amd64

radicale_user:
radicale_pass:

radicale_directory:
  data: "{{ data_path }}/radicale/data"
  etc: "{{ data_path }}/radicale/etc"
  conf: "{{ data_path }}/radicale/config"

radicale_internal_web_port: 5232

## taskd

taskd_domain: "{{ base_domain }}"
taskd_docker_image: andir/docker-taskd:latest
taskd_port: 53589

taskd_directory:
  data: "{{ data_path }}/taskd/data"

## Nextcloud

nextcloud_domain: "cloud.{{ base_domain }}"
nextcloud_docker_image: nextcloud:stable-apache
nextcloud_internal_web_port: 4001

nextcloud_directory:
  data: "{{ data_path }}/nextcloud/data"
  db: "{{ data_path }}/nextcloud/db"

### DB

nextcloud_db_service_name: nextcloud-db
nextcloud_db_name: nextcloud
nextcloud_db_user: nextcloud
nextcloud_db_user_pass:

## Taiga

taiga_domain: "taiga.{{ base_domain }}"
taiga_docker_image: m0wer/docker-taiga:v4.2.14
taiga_internal_web_port: 3050
taiga_secret_key:
taiga_backend_webhooks_enabled: false

taiga_directory:
  media: "{{ data_path }}/taiga/media"
  db: "{{ data_path }}/taiga/db"

### DB

taiga_db_image: "{{ docker_db_postgres_image }}"
taiga_db_service_name: taiga-db
taiga_db_name: taiga
taiga_db_user: taiga
taiga_db_user_pass:

### Email

taiga_default_from_email: "noreply@{{ taiga_domain }}"
taiga_email_backend: "django.core.mail.backends.smtp.EmailBackend"
taiga_email_use_tls: false
taiga_email_use_ssl: false
taiga_email_host: localhost
taiga_email_port: 25
taiga_email_user:
taiga_email_password:

### LDAP

taiga_enable_ldap: true
taiga_ldap_server: "{{ openldap_server_protocol }}{{ openldap_server_domain }}"
taiga_ldap_port: "{{ openldap_server_port }}"
taiga_ldap_bind_dn: "{{ openldap_bind_dn }}"
taiga_ldap_bind_credentials: "{{ openldap_bind_credentials }}"
taiga_ldap_search_base: "{{ openldap_search_base }}"
taiga_ldap_search_property: 'uid'
taiga_ldap_email_attribute: 'mail'
taiga_ldap_full_name_attribute: 'cn'

## NFS

nfs_docker_image: erichough/nfs-server:latest

# nfs_user_mounts:

nfs_directory:
  export: "{{ data_path }}/nfs/export"
  conf: "{{ data_path }}/nfs/conf"

nfs_exports_conf: |
  /export       192.168.1.0/24(ro,fsid=0,no_subtree_check)

nfs_export_volumes: |
  -v {{ nfs_directory.export }}:/export:ro \

## BIND DNS Server

user_uid_101: systemd-network

bind_dns_server_docker_image: sameersbn/bind:latest
bind_dns_server_port: 53

bind_dns_server_directory:
  data: "{{ data_path }}/bind_dns_server/data"

## Murmur

murmur_domain: "mumble.{{ base_domain }}"
murmur_docker_image: goofball222/murmur:latest
murmur_port: 64738

murmur_directory:
  conf: "{{ data_path }}/murmur/conf"
  data: "{{ data_path }}/murmur/data"
  log: "{{ data_path }}/murmur/log"

## Wiki.js

wikijs_docker_image: requarks/wiki:latest
wikijs_domain: "wiki.{{ base_domain }}"
wikijs_web_port: 3060
wikijs_network_name: "wikijs"

wikijs_directory:
  conf: "{{ data_path }}/wikijs/conf"
  db: "{{ data_path }}/wikijs/db"

wikijs_admin_email:
wikijs_title:
wikijs_public:
wikijs_session_secret:
wikijs_repo_url:
wikijs_repo_branch:
wikijs_repo_user:
wikijs_repo_pass:
wikijs_repo_commit_email:

### DB

wikijs_db_image: "{{ docker_db_mongo_image }}"
wikijs_db_service_name: wikijs-db
wikijs_db_user: wikijs
wikijs_db_user_pass:
wikijs_db_name: wikijs

### LDAP

wikijs_enable_ldap: false
wikijs_ldap_url: "{{ openldap_server_uri }}"
wikijs_ldap_bind_dn: "{{ openldap_bind_dn }}"
wikijs_ldap_bind_credentials: "{{ openldap_bind_credentials }}"
wikijs_ldap_search_base: "{{ openldap_search_base }}"

## InfluxDB

influxdb_docker_image: influxdb:alpine

influxdb_directory:
  data: "{{ data_path }}/influxdb/data"

influxdb_port: 8086
influxdb_open_port: false

### DB

influxdb_db: telegraf
influxdb_admin_user: admin
influxdb_admin_password:
influxdb_user: telegraf
influxdb_user_password:

## Grafana

grafana_domain: "metrics.{{ base_domain }}"
grafana_docker_image: grafana/grafana:latest

grafana_directory:
  conf: "{{ data_path }}/grafana/conf"
  data: "{{ data_path }}/grafana/data"

grafana_internal_web_port: 3070

grafana_admin_user: admin
grafana_admin_pass:

grafana_allow_sign_up: "false"

## Home Assistant

home_assistant_domain: "home.{{ base_domain }}"
home_assistant_docker_image: homeassistant/home-assistant:0.97.2

home_assistant_directory:
  conf: "{{ data_path }}/home_assistant/conf"

home_assistant_internal_web_port: 8123

## RStudio

rstudio_domain: "rstudio.{{ base_domain }}"
rstudio_docker_image: rocker/rstudio:3

rstudio_user: rstudio
rstudio_pass:

rstudio_directory:
  data: "{{ data_path }}/rstudio/data"

rstudio_cpus_limit: 2
rstudio_memory_limit: 3gb

rstudio_internal_web_port: 8787

## Jellyfin

jellyfin_docker_image: jellyfin/jellyfin
jellyfin_internal_web_port: 8096
jellyfin_domain: "jellyfin.{{ base_domain }}"

jellyfin_directory:
  cache: "{{ data_path }}/jellyfin/cache"
  config: "{{ data_path }}/jellyfin/config"
  media: "{{ data_path }}/jellyfin/media"

## Portainer

portainer_docker_image: portainer/portainer
portainer_internal_web_port: 3060
portainer_domain: "portainer.{{ base_domain }}"

portainer_directory:
  data: "{{ data_path }}/portainer/data"

## Anki Sync Server

anki_docker_image: kuklinistvan/anki-sync-server:latest
anki_internal_web_port: 27701
anki_domain: "anki.{{ base_domain }}"

anki_directory:
  data: "{{ data_path }}/anki/data"

## Moodle

moodle_docker_image: moodlehq/moodle-php-apache:7.4
moodle_internal_web_port: 8082
moodle_domain: "moodle.{{ base_domain }}"

moodle_git_repo: git://git.moodle.org/moodle.git
moodle_git_repo_version: MOODLE_38_STABLE

moodle_db_image: "{{ docker_db_postgres_image }}"
moodle_db_name: moodle
moodle_db_user: moodle
moodle_db_user_pass:

moodle_directory:
  db: "{{ data_path }}/moodle/db"
  data: "{{ data_path }}/moodle/data"
  html: "{{ data_path }}/moodle/html"
