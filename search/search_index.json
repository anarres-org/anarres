{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Anarres Full Playbook An ansible playbook to set up a GNU/Linux server. Services in docker . Security by default. The goal is to have a server for a community or personal use that's easy to maintain, secure and easy (and fast) to rebuild from scratch in case of data loss or a migration. The idea came from a great FLOSS project, sovereign , specially from sovereign 2 issue . What you'll get with this repo is a recipe based in variables that will setup a working server for your specific needs. You'll have the data stored only in one or two directories depending on your choices, see backup . The docker containers will upgrade themselves automatically every time their service restarts (you can do this periodically or it'll happen anyways when you reboot). Apart from this, it's easy to extend and doesn't prevent you from using other playbooks apart from this one or installing things manually. Documentation Anarres documentation . Compatibility These are the tested GNU/Linux distributions. Maybe it works on some other distributions too or just requires a few changes. debian buster Requirements sudo and python . Dependencies Included as submodules in roles/ . iptables_raw anarres-common anarres-sec letsencrypt-request anarres-nginx generic_docker_systemd add_nginx_proxy_conf Services Their data and configuration files will be stored in your hosts data_path directory, by default /data . Check the full list at Supported services list - Anarres documentation . For more info about each service and how to set it up, refer to the documentation. Setup Refer to Setup - Anarres documentation . Backup Make sure to backup your data_path (by default /data ). License GPLv3 Author Information m0wer: m0wer (at) autistici (dot) org acien101: amil101ftw (at) gmail (dot) com","title":"Anarres Full Playbook"},{"location":"#anarres-full-playbook","text":"An ansible playbook to set up a GNU/Linux server. Services in docker . Security by default. The goal is to have a server for a community or personal use that's easy to maintain, secure and easy (and fast) to rebuild from scratch in case of data loss or a migration. The idea came from a great FLOSS project, sovereign , specially from sovereign 2 issue . What you'll get with this repo is a recipe based in variables that will setup a working server for your specific needs. You'll have the data stored only in one or two directories depending on your choices, see backup . The docker containers will upgrade themselves automatically every time their service restarts (you can do this periodically or it'll happen anyways when you reboot). Apart from this, it's easy to extend and doesn't prevent you from using other playbooks apart from this one or installing things manually.","title":"Anarres Full Playbook"},{"location":"#documentation","text":"Anarres documentation .","title":"Documentation"},{"location":"#compatibility","text":"These are the tested GNU/Linux distributions. Maybe it works on some other distributions too or just requires a few changes. debian buster","title":"Compatibility"},{"location":"#requirements","text":"sudo and python .","title":"Requirements"},{"location":"#dependencies","text":"Included as submodules in roles/ . iptables_raw anarres-common anarres-sec letsencrypt-request anarres-nginx generic_docker_systemd add_nginx_proxy_conf","title":"Dependencies"},{"location":"#services","text":"Their data and configuration files will be stored in your hosts data_path directory, by default /data . Check the full list at Supported services list - Anarres documentation . For more info about each service and how to set it up, refer to the documentation.","title":"Services"},{"location":"#setup","text":"Refer to Setup - Anarres documentation .","title":"Setup"},{"location":"#backup","text":"Make sure to backup your data_path (by default /data ).","title":"Backup"},{"location":"#license","text":"GPLv3","title":"License"},{"location":"#author-information","text":"m0wer: m0wer (at) autistici (dot) org acien101: amil101ftw (at) gmail (dot) com","title":"Author Information"},{"location":"ldap/","text":"LDAP configuration By default, if you deploy the openldap and phpldapadmin tags to a server, a basic LDAP scheme will be created: dc=domain,dc=tld cn=admin the LDAP admin user. cn=readonly a read only user. ou=groups an organizational unit for groups. cn=users a group for users. ou=users an organizational unit for users. Now, we can use this structure for PAM login or for services (gitea, nextcloud..) for example. This is convenient because once we register a user, that user will be able to login using the same credentials for all the services (that authenticate against LDAP). phpLDAPadmin It's a web interface for our LDAP server. Here you can register, modify and delete users. Register the user with the email attribute, because some services will need it. If you are planning to use this users for PAM login (linux login), add them to the users group, so they have the same gid . Services To setup services to authenticate against our LDAP server, we'll have to configure them with the following parameters: Authentication Type: LDAP via BindDN Security protocol: LDAPS Host: our openLDAP IP or domain/subdomain Port: 636 Bind DN: cn=readonly,dc=anarres,dc=local Bind password: the value of openldap_readonly_password . User search base: ou=users,dc=anarres,dc=local User filter: (&(objectClass=posixAccount)(|(uid=%[1]s)(mail=%[1]s))) Email Attribute: mail Optionally, we can also add: Admin filter: (&(uid=admin)) or whatever the admin's uid is. First Name Attribute: givenName Surname Attribute: sn Configuration guides gitea nextcloud","title":"LDAP configuration"},{"location":"ldap/#ldap-configuration","text":"By default, if you deploy the openldap and phpldapadmin tags to a server, a basic LDAP scheme will be created: dc=domain,dc=tld cn=admin the LDAP admin user. cn=readonly a read only user. ou=groups an organizational unit for groups. cn=users a group for users. ou=users an organizational unit for users. Now, we can use this structure for PAM login or for services (gitea, nextcloud..) for example. This is convenient because once we register a user, that user will be able to login using the same credentials for all the services (that authenticate against LDAP).","title":"LDAP configuration"},{"location":"ldap/#phpldapadmin","text":"It's a web interface for our LDAP server. Here you can register, modify and delete users. Register the user with the email attribute, because some services will need it. If you are planning to use this users for PAM login (linux login), add them to the users group, so they have the same gid .","title":"phpLDAPadmin"},{"location":"ldap/#services","text":"To setup services to authenticate against our LDAP server, we'll have to configure them with the following parameters: Authentication Type: LDAP via BindDN Security protocol: LDAPS Host: our openLDAP IP or domain/subdomain Port: 636 Bind DN: cn=readonly,dc=anarres,dc=local Bind password: the value of openldap_readonly_password . User search base: ou=users,dc=anarres,dc=local User filter: (&(objectClass=posixAccount)(|(uid=%[1]s)(mail=%[1]s))) Email Attribute: mail Optionally, we can also add: Admin filter: (&(uid=admin)) or whatever the admin's uid is. First Name Attribute: givenName Surname Attribute: sn","title":"Services"},{"location":"ldap/#configuration-guides","text":"gitea nextcloud","title":"Configuration guides"},{"location":"setup/","text":"Setup Clone the repo and its submodules with: git clone --recurse-submodules -j10 [ repo ] Install sudo and python . Login as root and add your user to sudoers or to the sudo group with usermod -a -G sudo [user] . The idea is that you run the playbooks with the tags of the services that you want to setup. But, there are some steps that \"must\" be run first, before deploying the actual services. An example approach would be: Deploy the basic stuff (dependencies, directory creation, security...): -t init,common,sec If everything goes well, deploy the base web server: -t web Now you are ready to deploy the desired services, for example gitea: -t gitea Tips You can check the available tags with: ansible-playbook --list-tags full.yml You can create a custom/ folder in the playbook root directory. There you can save your inventory files with your chosen variables for each host. This folder will be ignored thanks to the .gitignore configuration. As some of the variables are passwords, you can encrypt them with ansible-vault Before deploying anything, check the variables and their default values from group_vars/all.yml . Copy and change the required ones to your custom inventory file. Deploy only a few tags with: ansible-playbook -i custom/ [ project ] /hosts.yml full.yml --extra-vars ansible_become_pass = \"[sudo_password]\" --ask-vault-pass -t gitea * By default, the configuration files of the services won't be overridden in most cases, meaning that if they already existed they won't be modified, to preserve their possible manual modifications. To avoid this behaviour and overwrite them, pass the override=True extra var. Firewall If you are behind some kind of firewall or you need to setup NAT, you should add the following ports: 80 for HTTP connections, used for the letsencrypt verification 443 for HTTPs connections, used by the reverse proxy to serve access to the web services. The SSH port you choose, or 2222 by default. All the desired ports that some services have. Letsencrypt The main domain cert needs to be obtained using the standalone method since we don't have a working webserver by this point (the server needs the cert). So the webroot path will be empty in /etc/letsencrypt/renewal/{{ base_domain }}.conf . You should manually specify it adding: authenticator = webroot webroot_path = /var/www/letsencrypt, Nvidia runtime support Some services (such as jellyfin and jupyter) can benefit from GPU acceleration. In order to generally enable nvdia runtime support for the services set the variable nvidia_runtime to true . Note that the nvidia-container-toolkit must be installed manually, check nvidia-docker .","title":"Setup"},{"location":"setup/#setup","text":"Clone the repo and its submodules with: git clone --recurse-submodules -j10 [ repo ] Install sudo and python . Login as root and add your user to sudoers or to the sudo group with usermod -a -G sudo [user] . The idea is that you run the playbooks with the tags of the services that you want to setup. But, there are some steps that \"must\" be run first, before deploying the actual services. An example approach would be: Deploy the basic stuff (dependencies, directory creation, security...): -t init,common,sec If everything goes well, deploy the base web server: -t web Now you are ready to deploy the desired services, for example gitea: -t gitea","title":"Setup"},{"location":"setup/#tips","text":"You can check the available tags with: ansible-playbook --list-tags full.yml You can create a custom/ folder in the playbook root directory. There you can save your inventory files with your chosen variables for each host. This folder will be ignored thanks to the .gitignore configuration. As some of the variables are passwords, you can encrypt them with ansible-vault Before deploying anything, check the variables and their default values from group_vars/all.yml . Copy and change the required ones to your custom inventory file. Deploy only a few tags with: ansible-playbook -i custom/ [ project ] /hosts.yml full.yml --extra-vars ansible_become_pass = \"[sudo_password]\" --ask-vault-pass -t gitea * By default, the configuration files of the services won't be overridden in most cases, meaning that if they already existed they won't be modified, to preserve their possible manual modifications. To avoid this behaviour and overwrite them, pass the override=True extra var.","title":"Tips"},{"location":"setup/#firewall","text":"If you are behind some kind of firewall or you need to setup NAT, you should add the following ports: 80 for HTTP connections, used for the letsencrypt verification 443 for HTTPs connections, used by the reverse proxy to serve access to the web services. The SSH port you choose, or 2222 by default. All the desired ports that some services have.","title":"Firewall"},{"location":"setup/#letsencrypt","text":"The main domain cert needs to be obtained using the standalone method since we don't have a working webserver by this point (the server needs the cert). So the webroot path will be empty in /etc/letsencrypt/renewal/{{ base_domain }}.conf . You should manually specify it adding: authenticator = webroot webroot_path = /var/www/letsencrypt,","title":"Letsencrypt"},{"location":"setup/#nvidia-runtime-support","text":"Some services (such as jellyfin and jupyter) can benefit from GPU acceleration. In order to generally enable nvdia runtime support for the services set the variable nvidia_runtime to true . Note that the nvidia-container-toolkit must be installed manually, check nvidia-docker .","title":"Nvidia runtime support"},{"location":"supported_services_list/","text":"Supported services list Docker Registry : A stateless, highly scalable server side application that stores and lets you distribute Docker images. Using library/registry . CoreOS Clair : Vulnerability Static Analysis for Containers. Using quay.io/coreos/clair . Jessfraz Docker registry web interface : Docker registry v2 command line client and repo listing generator with security checks. Using jessfraz/reg . OpenLDAP : Using osixia/openldap . phpLDAPadmin : Using osixia/phpldapadmin . Prosody IM : A modern XMPP communication server. Using unclev/prosody-docker-extended . Gitea : Using gitea/gitea . Drone : Using drone/drone . For the self hosted gitea and for GitHub. CodiMD : HackMD like realtime collaborative markdown notes service. Using docker-hackmd . Transmission : Using linuxserver/transmission or docker-transmission-openvpn . Wallabag : Using wallabag/wallabag . Syncthing : Using syncthing/syncthing . OpenVPN : Using kylemanna/openvpn . Radicale : Using tomsquest/docker-radicale . Taskwarrior Server : Using andir/docker-taskd . Nextcloud : Using nextcloud . Taiga : Project management platform for agile developers & designers and project managers. Using docker-taiga . NFS Server : Using erichough/nfs-server . BIND9 Versatile, classic, complete name server software. Using sameersbn/bind . Murmur : Open source, low-latency, high quality voice chat software. Using m0wer/murmur . InfluxDB : Scalable datastore for metrics, events, and real-time analytics. Using influxdb . Grafana : The open platform for beautiful analytics and monitoring. Using grafana/grafana . Home Assistant Open source home automation that puts local control and privacy first. Using homeassistant/home-assistant RStudio provides popular open source and enterprise-ready professional software for the R statistical computing environment. Using rocker/rstudio . Jellyfin The Free Software Media System. Using jellyfin/jellyfin . Portainer Making Docker management easy. Using portainer/portainer . Anki sync server This is a personal Anki server, which you can sync against instead of AnkiWeb. Using kuklinistvan/anki-sync-server . Moodle Open-source learning plataform. Using moodlehq/moodle-php-apache . JupyterHub A multi-user version of the notebook designed for companies, classrooms and research labs. Using m0wer/jupyterhub . Jackett API Support for your favorite torrent trackers. Using linuxserver/jackett . Sonarr API Support for your favorite torrent trackers. Using linuxserver/sonarr . Radarr A fork of Sonarr to work with movies \u00e0 la Couchpotato. Using linuxserver/radarr . Lidarr Looks and smells like Sonarr but made for music. Using linuxserver/lidarr . Bazarr is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements. Using linuxserver/bazarr . Ombi Want a Movie or TV Show on Plex or Emby? Use Ombi! Using linuxserver/ombi . ShareLatex A web-based collaborative LaTeX editor. Using sharelatex/sharelatex .","title":"Supported services list"},{"location":"supported_services_list/#supported-services-list","text":"Docker Registry : A stateless, highly scalable server side application that stores and lets you distribute Docker images. Using library/registry . CoreOS Clair : Vulnerability Static Analysis for Containers. Using quay.io/coreos/clair . Jessfraz Docker registry web interface : Docker registry v2 command line client and repo listing generator with security checks. Using jessfraz/reg . OpenLDAP : Using osixia/openldap . phpLDAPadmin : Using osixia/phpldapadmin . Prosody IM : A modern XMPP communication server. Using unclev/prosody-docker-extended . Gitea : Using gitea/gitea . Drone : Using drone/drone . For the self hosted gitea and for GitHub. CodiMD : HackMD like realtime collaborative markdown notes service. Using docker-hackmd . Transmission : Using linuxserver/transmission or docker-transmission-openvpn . Wallabag : Using wallabag/wallabag . Syncthing : Using syncthing/syncthing . OpenVPN : Using kylemanna/openvpn . Radicale : Using tomsquest/docker-radicale . Taskwarrior Server : Using andir/docker-taskd . Nextcloud : Using nextcloud . Taiga : Project management platform for agile developers & designers and project managers. Using docker-taiga . NFS Server : Using erichough/nfs-server . BIND9 Versatile, classic, complete name server software. Using sameersbn/bind . Murmur : Open source, low-latency, high quality voice chat software. Using m0wer/murmur . InfluxDB : Scalable datastore for metrics, events, and real-time analytics. Using influxdb . Grafana : The open platform for beautiful analytics and monitoring. Using grafana/grafana . Home Assistant Open source home automation that puts local control and privacy first. Using homeassistant/home-assistant RStudio provides popular open source and enterprise-ready professional software for the R statistical computing environment. Using rocker/rstudio . Jellyfin The Free Software Media System. Using jellyfin/jellyfin . Portainer Making Docker management easy. Using portainer/portainer . Anki sync server This is a personal Anki server, which you can sync against instead of AnkiWeb. Using kuklinistvan/anki-sync-server . Moodle Open-source learning plataform. Using moodlehq/moodle-php-apache . JupyterHub A multi-user version of the notebook designed for companies, classrooms and research labs. Using m0wer/jupyterhub . Jackett API Support for your favorite torrent trackers. Using linuxserver/jackett . Sonarr API Support for your favorite torrent trackers. Using linuxserver/sonarr . Radarr A fork of Sonarr to work with movies \u00e0 la Couchpotato. Using linuxserver/radarr . Lidarr Looks and smells like Sonarr but made for music. Using linuxserver/lidarr . Bazarr is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements. Using linuxserver/bazarr . Ombi Want a Movie or TV Show on Plex or Emby? Use Ombi! Using linuxserver/ombi . ShareLatex A web-based collaborative LaTeX editor. Using sharelatex/sharelatex .","title":"Supported services list"},{"location":"testing/","text":"Testing The testing process consists in deploying the complete playbook ( full.yml ) to a fresh virtual machine using molecule and vagrant . Steps that will be made: Destroy pre-existing instances. Not used . Fetch dependencies (git or ansible-galaxy). Syntax check. Create instances. Prepare instances (install python). Converge: deploy the playbook. Idempotence: re-run the playbook. Lint: ansible good practices. Not used . Side effects. Verify: run tests. Destroy instances. \u2514\u2500\u2500 default \u251c\u2500\u2500 destroy \u251c\u2500\u2500 dependency \u251c\u2500\u2500 syntax \u251c\u2500\u2500 create \u251c\u2500\u2500 prepare \u251c\u2500\u2500 converge \u251c\u2500\u2500 idempotence \u251c\u2500\u2500 lint \u251c\u2500\u2500 side_effect \u251c\u2500\u2500 verify \u2514\u2500\u2500 destroy Note: you can run a step individually: molecule [step] . You will need: virtualbox vagrant vagrant-vbguest vagrant-cachier (optional). Used vagrant boxes. Example: vagrant box add debian/buster64 . Python tools: pip install molecule testinfra python-vagrant ansible yamllint ansible-lint Note: a virtualenv (python2) is recommended. You can use virtualenvwrapper . A docker registry mirror in your local machine (optional). You can install it following this guide: docker-doc . TL;DR: docker run -d -p 5000:5000 --restart always --name registry -e \"REGISTRY_DELETE_ENABLED=true\" -e \"REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io\" registry:2 If you don't want to use it, comment or delete docker_registry_mirror: http://172.16.100.1:5000 in molecule/default/molecule.yml . If you use iptables on your host machine: iptables -A INPUT -s 172.16.100.0/24 -i vboxnet0 -p tcp -m tcp --dport 5000 -j ACCEPT . Configuration The main configuration file is molecule/default/molecule.yml . Process To run every step mentioned above: molecule test . That's all. Workflow Change stuff and write its tests. molecule test Correct the errors. Re run only the failing part. E.g. molecule idempotence . Tips You can connect to the virtual machine with: molecule login . This is really useful for debugging. You can run only the tests with molecule verify . It is useful to add this lines to your local /etc/hosts file, so that you can access the testing virtual machine via web: ## anarres 172.16.100.12 anarres.local 172.16.100.12 git.anarres.local 172.16.100.12 cloud.anarres.local 172.16.100.12 drone-github.anarres.local 172.16.100.12 codimd.anarres.local 172.16.100.12 taiga.anarres.local You can get more information from molecule running it in debug mode: molecule --debug test . Be careful for not adding folders like .venv . Virtualenv must be outside .","title":"Testing"},{"location":"testing/#testing","text":"The testing process consists in deploying the complete playbook ( full.yml ) to a fresh virtual machine using molecule and vagrant . Steps that will be made: Destroy pre-existing instances. Not used . Fetch dependencies (git or ansible-galaxy). Syntax check. Create instances. Prepare instances (install python). Converge: deploy the playbook. Idempotence: re-run the playbook. Lint: ansible good practices. Not used . Side effects. Verify: run tests. Destroy instances. \u2514\u2500\u2500 default \u251c\u2500\u2500 destroy \u251c\u2500\u2500 dependency \u251c\u2500\u2500 syntax \u251c\u2500\u2500 create \u251c\u2500\u2500 prepare \u251c\u2500\u2500 converge \u251c\u2500\u2500 idempotence \u251c\u2500\u2500 lint \u251c\u2500\u2500 side_effect \u251c\u2500\u2500 verify \u2514\u2500\u2500 destroy Note: you can run a step individually: molecule [step] . You will need: virtualbox vagrant vagrant-vbguest vagrant-cachier (optional). Used vagrant boxes. Example: vagrant box add debian/buster64 . Python tools: pip install molecule testinfra python-vagrant ansible yamllint ansible-lint Note: a virtualenv (python2) is recommended. You can use virtualenvwrapper . A docker registry mirror in your local machine (optional). You can install it following this guide: docker-doc . TL;DR: docker run -d -p 5000:5000 --restart always --name registry -e \"REGISTRY_DELETE_ENABLED=true\" -e \"REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io\" registry:2 If you don't want to use it, comment or delete docker_registry_mirror: http://172.16.100.1:5000 in molecule/default/molecule.yml . If you use iptables on your host machine: iptables -A INPUT -s 172.16.100.0/24 -i vboxnet0 -p tcp -m tcp --dport 5000 -j ACCEPT .","title":"Testing"},{"location":"testing/#configuration","text":"The main configuration file is molecule/default/molecule.yml .","title":"Configuration"},{"location":"testing/#process","text":"To run every step mentioned above: molecule test . That's all.","title":"Process"},{"location":"testing/#workflow","text":"Change stuff and write its tests. molecule test Correct the errors. Re run only the failing part. E.g. molecule idempotence .","title":"Workflow"},{"location":"testing/#tips","text":"You can connect to the virtual machine with: molecule login . This is really useful for debugging. You can run only the tests with molecule verify . It is useful to add this lines to your local /etc/hosts file, so that you can access the testing virtual machine via web: ## anarres 172.16.100.12 anarres.local 172.16.100.12 git.anarres.local 172.16.100.12 cloud.anarres.local 172.16.100.12 drone-github.anarres.local 172.16.100.12 codimd.anarres.local 172.16.100.12 taiga.anarres.local You can get more information from molecule running it in debug mode: molecule --debug test . Be careful for not adding folders like .venv . Virtualenv must be outside .","title":"Tips"},{"location":"services/anki_sync_server/","text":"Anki sync server Anki sync server This is a personal Anki server, which you can sync against instead of AnkiWeb. Variables anki_docker_image : Name for the service docker image. anki_domain : Domain/subdomain for the service. anki_internal_web_port : (Default: 27701 ) Port on the host to bind the service to. anki_directory : data : Path on the host for persistent data.","title":"Anki sync server"},{"location":"services/anki_sync_server/#anki-sync-server","text":"Anki sync server This is a personal Anki server, which you can sync against instead of AnkiWeb.","title":"Anki sync server"},{"location":"services/anki_sync_server/#variables","text":"anki_docker_image : Name for the service docker image. anki_domain : Domain/subdomain for the service. anki_internal_web_port : (Default: 27701 ) Port on the host to bind the service to. anki_directory : data : Path on the host for persistent data.","title":"Variables"},{"location":"services/bazarr/","text":"Bazarr Bazarr is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements. Variables bazarr_docker_image : Name for the service docker image. bazarr_internal_web_port : (Default: 7878 ) Port on the host to bind the service to. bazarr_domain : Domain/subdomain for the service. bazarr_directory : conf : Path on the host for persistent configurations. movies : Path on the host of the Movie library on disk. tv : Path on the host of the TV library on disk. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it. Reference Setup Guide","title":"Bazarr"},{"location":"services/bazarr/#bazarr","text":"Bazarr is a companion application to Sonarr and Radarr. It manages and downloads subtitles based on your requirements.","title":"Bazarr"},{"location":"services/bazarr/#variables","text":"bazarr_docker_image : Name for the service docker image. bazarr_internal_web_port : (Default: 7878 ) Port on the host to bind the service to. bazarr_domain : Domain/subdomain for the service. bazarr_directory : conf : Path on the host for persistent configurations. movies : Path on the host of the Movie library on disk. tv : Path on the host of the TV library on disk.","title":"Variables"},{"location":"services/bazarr/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it.","title":"Setup"},{"location":"services/bazarr/#reference","text":"Setup Guide","title":"Reference"},{"location":"services/bind_dns_server/","text":"BIND DNS server BIND9 Versatile, classic, complete name server software. You need to specify the user with the uid 101 if it isn't systemd-network . Check it in /etc/passwd . Refer to ubuntu-help to see how to configure it. Ports 53/tcp and udp .","title":"BIND DNS server"},{"location":"services/bind_dns_server/#bind-dns-server","text":"BIND9 Versatile, classic, complete name server software. You need to specify the user with the uid 101 if it isn't systemd-network . Check it in /etc/passwd . Refer to ubuntu-help to see how to configure it.","title":"BIND DNS server"},{"location":"services/bind_dns_server/#ports","text":"53/tcp and udp .","title":"Ports"},{"location":"services/clair/","text":"CoreOS Clair CoreOS Clair : Vulnerability Static Analysis for Containers. Variables clair_docker_image : Name for the service docker image. clair_db_image : Postgres Docker image name for the database service. clair_internal_ports : (Default: 6060-6061 ) Range of two ports for the service. The first one is for the HTTP API and the second one for health checks. clair_update_interval : (Default: 24h ) Frequency the database will be updated with vulnerabilities from the default data sources. clair_db_service_name : (Default: clair-db ) Name for the database for this app. clair_directory : conf : Path on the host for the configuration directory. db : Path on the host for the database data directory. clair_db_name : (Default: clair ) Name for the database of this app. clair_db_user : (Default: clair ) Username for the database of this app. clair_db_user_pass : Password for that user. Ports 6060 tcp for the HTTP API. 6061 tcp for health checks.","title":"CoreOS Clair"},{"location":"services/clair/#coreos-clair","text":"CoreOS Clair : Vulnerability Static Analysis for Containers.","title":"CoreOS Clair"},{"location":"services/clair/#variables","text":"clair_docker_image : Name for the service docker image. clair_db_image : Postgres Docker image name for the database service. clair_internal_ports : (Default: 6060-6061 ) Range of two ports for the service. The first one is for the HTTP API and the second one for health checks. clair_update_interval : (Default: 24h ) Frequency the database will be updated with vulnerabilities from the default data sources. clair_db_service_name : (Default: clair-db ) Name for the database for this app. clair_directory : conf : Path on the host for the configuration directory. db : Path on the host for the database data directory. clair_db_name : (Default: clair ) Name for the database of this app. clair_db_user : (Default: clair ) Username for the database of this app. clair_db_user_pass : Password for that user.","title":"Variables"},{"location":"services/clair/#ports","text":"6060 tcp for the HTTP API. 6061 tcp for health checks.","title":"Ports"},{"location":"services/codimd/","text":"CodiMD Realtime collaborative markdown notes on all platforms. Like HackMD . Based on CodiMD . Variables codimd_docker_image : (Default: hackmdio/hackmd:1-alpine ) Docker image name for the service. codimd_domain : Domain/subdomain for the service. codimd_web_port : Internal port on the host to bind the web interface to. codimd_network_name : (Default: codimd ) Name of the doker network for the service and its database. codimd_directory.db : Path on the host for the database data directory. codimd_directory.uploads : Path on the host for the image uploads directory. codimd_db_image : Postgres Docker image name for the database service. codimd_db_service_name : (Default: codimd-db ) Name for the database service. codimd_db_user : (Default: codimd ) Username for the database and the app. codimd_db_user_pass : Password for that user. codimd_db_name : (Default: codimd ) Name for the database for this app. codimd_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. codimd_ldap_url : LDAP server address. Include ldaps:// at the begining and :[port] at the end. (Example: ldaps://anarres.local:636 ) codimd_ldap_bind_dn : Bind DN to use to login to the LDAP server. codimd_ldap_bind_credentials : Password for that account. codimd_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) codimd_ldap_search_filter : (Default: (uid={{username}}) ) LDAP filter to verify the users's identification. codimd_ldap_search_attributes : (Default: uid, mail ) Attributes to search with the LDAP query. codimd_ldap_user_field : (Default: uid ) The LDAP field which is used uniquely identify a user on CodiMD. codimd_ldap_user_name_field : (Default: uid ) The LDAP field which is used as the username on CodiMD.","title":"CodiMD"},{"location":"services/codimd/#codimd","text":"Realtime collaborative markdown notes on all platforms. Like HackMD . Based on CodiMD .","title":"CodiMD"},{"location":"services/codimd/#variables","text":"codimd_docker_image : (Default: hackmdio/hackmd:1-alpine ) Docker image name for the service. codimd_domain : Domain/subdomain for the service. codimd_web_port : Internal port on the host to bind the web interface to. codimd_network_name : (Default: codimd ) Name of the doker network for the service and its database. codimd_directory.db : Path on the host for the database data directory. codimd_directory.uploads : Path on the host for the image uploads directory. codimd_db_image : Postgres Docker image name for the database service. codimd_db_service_name : (Default: codimd-db ) Name for the database service. codimd_db_user : (Default: codimd ) Username for the database and the app. codimd_db_user_pass : Password for that user. codimd_db_name : (Default: codimd ) Name for the database for this app. codimd_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. codimd_ldap_url : LDAP server address. Include ldaps:// at the begining and :[port] at the end. (Example: ldaps://anarres.local:636 ) codimd_ldap_bind_dn : Bind DN to use to login to the LDAP server. codimd_ldap_bind_credentials : Password for that account. codimd_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) codimd_ldap_search_filter : (Default: (uid={{username}}) ) LDAP filter to verify the users's identification. codimd_ldap_search_attributes : (Default: uid, mail ) Attributes to search with the LDAP query. codimd_ldap_user_field : (Default: uid ) The LDAP field which is used uniquely identify a user on CodiMD. codimd_ldap_user_name_field : (Default: uid ) The LDAP field which is used as the username on CodiMD.","title":"Variables"},{"location":"services/drone/","text":"Drone Needs Gitea to be deployed. Authenticates against the Gitea itself. In order to deploy Drone against Gitea, you must set up some variables. Follow the next steps: Create an OAuth Application Create a Gitea OAuth application. You mus go you profile Settings and go to Applications . Set up Applicaction Name with a simple name, and Redirect URI with the drone subdomain. The Consumer Key and Consumer Secret are used to authorize access to Gitea resources. The authorization callback URL must match the below format and path, and must use your exact server scheme and host. Copy the content of Client ID field on gitea_oauth_client_id variable. Copy the content of Client Secret field on gitea_oauth_client_secret variable. Create a Shared Secret Create a shared secret to authenticate communication between runners and your central Drone server. You can use openssl to generate a shared secret: $ openssl rand -hex 16 bea26a2221fd8090ea38720fc445eca6 The output of this command is the content of the variable drone_rpc_scret Deploy Drone with Anarres $ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone\" full.yml Deploying Drone Docker Runner with Anarres The Docker runner is a daemon that executes pipelines steps inside ephemeral Docker containers. Docs of Drone Docker Runner can be found here . $ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone_docker_runner\" full.yml Deploying Drone SSH Runner with Anarres The SSH runner executes pipeline commands on a static, remote server using the SSH protocol. The pipeline commands are executed directly on the remote server without isolation, using the default shell. Docs of Drone SSH Runner can be found here Important . We strongly suggest using Docker Runner instead this runner because SSH Runner is not very stable, and more secure. $ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone_ssh_runner\" full.yml","title":"Drone"},{"location":"services/drone/#drone","text":"Needs Gitea to be deployed. Authenticates against the Gitea itself. In order to deploy Drone against Gitea, you must set up some variables. Follow the next steps:","title":"Drone"},{"location":"services/drone/#create-an-oauth-application","text":"Create a Gitea OAuth application. You mus go you profile Settings and go to Applications . Set up Applicaction Name with a simple name, and Redirect URI with the drone subdomain. The Consumer Key and Consumer Secret are used to authorize access to Gitea resources. The authorization callback URL must match the below format and path, and must use your exact server scheme and host. Copy the content of Client ID field on gitea_oauth_client_id variable. Copy the content of Client Secret field on gitea_oauth_client_secret variable.","title":"Create an OAuth Application"},{"location":"services/drone/#create-a-shared-secret","text":"Create a shared secret to authenticate communication between runners and your central Drone server. You can use openssl to generate a shared secret: $ openssl rand -hex 16 bea26a2221fd8090ea38720fc445eca6 The output of this command is the content of the variable drone_rpc_scret","title":"Create a Shared Secret"},{"location":"services/drone/#deploy-drone-with-anarres","text":"$ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone\" full.yml","title":"Deploy Drone with Anarres"},{"location":"services/drone/#deploying-drone-docker-runner-with-anarres","text":"The Docker runner is a daemon that executes pipelines steps inside ephemeral Docker containers. Docs of Drone Docker Runner can be found here . $ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone_docker_runner\" full.yml","title":"Deploying Drone Docker Runner with Anarres"},{"location":"services/drone/#deploying-drone-ssh-runner-with-anarres","text":"The SSH runner executes pipeline commands on a static, remote server using the SSH protocol. The pipeline commands are executed directly on the remote server without isolation, using the default shell. Docs of Drone SSH Runner can be found here Important . We strongly suggest using Docker Runner instead this runner because SSH Runner is not very stable, and more secure. $ ansible-playbook --ask-vault-pass -i custom/KLK/hosts.yml --tags \"drone_ssh_runner\" full.yml","title":"Deploying Drone SSH Runner with Anarres"},{"location":"services/drone_github/","text":"Drone for GitHub You need to set up some things in your GitHub account first. You need your GitHub's client id and client secret . Visit the drone docs and follow the instructions.","title":"Drone for GitHub"},{"location":"services/drone_github/#drone-for-github","text":"You need to set up some things in your GitHub account first. You need your GitHub's client id and client secret . Visit the drone docs and follow the instructions.","title":"Drone for GitHub"},{"location":"services/gitea/","text":"Gitea First user to register will be the admin user. Ports 22/tcp for SSH.","title":"Gitea"},{"location":"services/gitea/#gitea","text":"First user to register will be the admin user.","title":"Gitea"},{"location":"services/gitea/#ports","text":"22/tcp for SSH.","title":"Ports"},{"location":"services/grafana/","text":"Grafana Grafana : The open platform for beautiful analytics and monitoring. Variables grafana_docker_image : Name for the service docker image. grafana_domain : Domain/subdomain for the service. grafana_directory : conf : Path on the host for persistent configurations. data : Path on the host for persistent data. grafana_internal_web_port : (Default: 3070 ) Port on the host to bind the service to. grafana_admin_user : Username for the admin user. grafana_admin_password : Password for the admin user. grafana_allow_sign_up : (Default \"false\" ) Boolean (\"true\" or \"false\") to allow sign up.","title":"Grafana"},{"location":"services/grafana/#grafana","text":"Grafana : The open platform for beautiful analytics and monitoring.","title":"Grafana"},{"location":"services/grafana/#variables","text":"grafana_docker_image : Name for the service docker image. grafana_domain : Domain/subdomain for the service. grafana_directory : conf : Path on the host for persistent configurations. data : Path on the host for persistent data. grafana_internal_web_port : (Default: 3070 ) Port on the host to bind the service to. grafana_admin_user : Username for the admin user. grafana_admin_password : Password for the admin user. grafana_allow_sign_up : (Default \"false\" ) Boolean (\"true\" or \"false\") to allow sign up.","title":"Variables"},{"location":"services/home_assistant/","text":"Home Assistant Home Assistant Open source home automation that puts local control and privacy first. Variables home_assistant_domain : Domain/subdomain for the service. home_assistant_docker_image : Name for the service docker image. home_assistant_directory : conf : Path on the host for persistent configurations. home_assistant_internal_web_port : (Default: 8123 ) Port on the host to bind the service to.","title":"Home Assistant"},{"location":"services/home_assistant/#home-assistant","text":"Home Assistant Open source home automation that puts local control and privacy first.","title":"Home Assistant"},{"location":"services/home_assistant/#variables","text":"home_assistant_domain : Domain/subdomain for the service. home_assistant_docker_image : Name for the service docker image. home_assistant_directory : conf : Path on the host for persistent configurations. home_assistant_internal_web_port : (Default: 8123 ) Port on the host to bind the service to.","title":"Variables"},{"location":"services/influxdb/","text":"InfluxDB InfluxDB : Scalable datastore for metrics, events, and real-time analytics. Variables influxdb_docker_image : Name for the service docker image. influxdb_directory : data : Path on the host for persistent data. influxdb_port : (Default: 8086 ) Port on the host to bind the service to. influxdb_open_port : Boolean value to open influxdb_port in the firewall. influxdb_db : Name of the database to create. influxdb_admin_user : Username for the admin user. influxdb_admin_password : Password for the admin user. influxdb_user : Username for the unprivileged user (with access to influxdb_db ). influxdb_user_password : Password for that user. Ports If influxdb_open_port is set to true , the influxdb_port will be accesible from outside the server.","title":"InfluxDB"},{"location":"services/influxdb/#influxdb","text":"InfluxDB : Scalable datastore for metrics, events, and real-time analytics.","title":"InfluxDB"},{"location":"services/influxdb/#variables","text":"influxdb_docker_image : Name for the service docker image. influxdb_directory : data : Path on the host for persistent data. influxdb_port : (Default: 8086 ) Port on the host to bind the service to. influxdb_open_port : Boolean value to open influxdb_port in the firewall. influxdb_db : Name of the database to create. influxdb_admin_user : Username for the admin user. influxdb_admin_password : Password for the admin user. influxdb_user : Username for the unprivileged user (with access to influxdb_db ). influxdb_user_password : Password for that user.","title":"Variables"},{"location":"services/influxdb/#ports","text":"If influxdb_open_port is set to true , the influxdb_port will be accesible from outside the server.","title":"Ports"},{"location":"services/jackett/","text":"Jackett Jackett API Support for your favorite torrent trackers. Variables jackett_docker_image : Name for the service docker image. jackett_internal_web_port : (Default: 9117 ) Port on the host to bind the service to. jackett_domain : Domain/subdomain for the service. jackett_directory : conf : Path on the host for persistent configurations. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Add trackers.","title":"Jackett"},{"location":"services/jackett/#jackett","text":"Jackett API Support for your favorite torrent trackers.","title":"Jackett"},{"location":"services/jackett/#variables","text":"jackett_docker_image : Name for the service docker image. jackett_internal_web_port : (Default: 9117 ) Port on the host to bind the service to. jackett_domain : Domain/subdomain for the service. jackett_directory : conf : Path on the host for persistent configurations.","title":"Variables"},{"location":"services/jackett/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port. Add trackers.","title":"Setup"},{"location":"services/jellyfin/","text":"Jellyfin Jellyfin The Free Software Media System. Variables jellyfin_docker_image : Domain/subdomain for the service. jellyfin_domain : Domain/subdomain for the service. jellyfin_internal_web_port : (Default: 8096 ) Port on the host to bind the service to. jellyfin_directory : cache : Path on the host for persistent cache. config : Path on the host for persistent configurations. media : Path on the host to get the media from..","title":"Jellyfin"},{"location":"services/jellyfin/#jellyfin","text":"Jellyfin The Free Software Media System.","title":"Jellyfin"},{"location":"services/jellyfin/#variables","text":"jellyfin_docker_image : Domain/subdomain for the service. jellyfin_domain : Domain/subdomain for the service. jellyfin_internal_web_port : (Default: 8096 ) Port on the host to bind the service to. jellyfin_directory : cache : Path on the host for persistent cache. config : Path on the host for persistent configurations. media : Path on the host to get the media from..","title":"Variables"},{"location":"services/jupyterhub/","text":"JupyterHub JupyterHub A multi-user version of the notebook designed for companies, classrooms and research labs. Variables jupyterhub_docker_image : Name for the service docker image. jupyterhub_internal_web_port : (Default: 8000 ) Port on the host to bind the service to. jupyterhub_domain : Domain/subdomain for the service. jupyterhub_directory : data : Path on the host for persistent data. user_data : Path on the host for persistent user data. jupyterhub_jupyter_docker_image : Docker image to be spawned for the users. jupyterhub_admin_users : List of usernames that are admins of JupyterHub. jupyterhub_user_container_mem_limit : (Default: 2G ) Memoery limit for the spawned containers. jupyterhub_nvidia_runtime : Boolean value to enable nvidia runtime support for the spawned containers. jupyterhub_ldap_hostname : LDAP server hostname or IP. jupyterhub_ldap_bind_dn : Bind DN to use to login to the LDAP server. jupyterhub_ldap_bind_credentials : Password for that account. jupyterhub_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) jupyterhub_ldap_user_attribute : (Default: uid ) The LDAP field which is used in the login. jupyterhub_ldap_user_dn_attribute : (Default: cn ) The LDAP field which is used for binding against the LDAP. jupyterhub_bind_dn_template : Template used to generate the full dn for a user from the human readable username. Reference ldapauthenticator","title":"JupyterHub"},{"location":"services/jupyterhub/#jupyterhub","text":"JupyterHub A multi-user version of the notebook designed for companies, classrooms and research labs.","title":"JupyterHub"},{"location":"services/jupyterhub/#variables","text":"jupyterhub_docker_image : Name for the service docker image. jupyterhub_internal_web_port : (Default: 8000 ) Port on the host to bind the service to. jupyterhub_domain : Domain/subdomain for the service. jupyterhub_directory : data : Path on the host for persistent data. user_data : Path on the host for persistent user data. jupyterhub_jupyter_docker_image : Docker image to be spawned for the users. jupyterhub_admin_users : List of usernames that are admins of JupyterHub. jupyterhub_user_container_mem_limit : (Default: 2G ) Memoery limit for the spawned containers. jupyterhub_nvidia_runtime : Boolean value to enable nvidia runtime support for the spawned containers. jupyterhub_ldap_hostname : LDAP server hostname or IP. jupyterhub_ldap_bind_dn : Bind DN to use to login to the LDAP server. jupyterhub_ldap_bind_credentials : Password for that account. jupyterhub_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) jupyterhub_ldap_user_attribute : (Default: uid ) The LDAP field which is used in the login. jupyterhub_ldap_user_dn_attribute : (Default: cn ) The LDAP field which is used for binding against the LDAP. jupyterhub_bind_dn_template : Template used to generate the full dn for a user from the human readable username.","title":"Variables"},{"location":"services/jupyterhub/#reference","text":"ldapauthenticator","title":"Reference"},{"location":"services/lidarr/","text":"Lidarr Lidarr Looks and smells like Sonarr but made for music. Variables lidarr_docker_image : Name for the service docker image. lidarr_internal_web_port : (Default: 8686 ) Port on the host to bind the service to. lidarr_domain : Domain/subdomain for the service. lidarr_directory : conf : Path on the host for persistent configurations. music : Path on the host of the Music library on disk. downloadclient : Path on the host of the download managers output directory. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it. Troubleshooting Configuring Jackett Reddit Configuring Transmission as the download client Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Lidarr container, you might have to specify a remote path mapping in the Download Client tab in Lidarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/ No root paths on Ombi If no root paths appear on Ombi when trying to connect it to Lidarr, add them on Lidarr > Settings > Media Management > Root Folders.","title":"Lidarr"},{"location":"services/lidarr/#lidarr","text":"Lidarr Looks and smells like Sonarr but made for music.","title":"Lidarr"},{"location":"services/lidarr/#variables","text":"lidarr_docker_image : Name for the service docker image. lidarr_internal_web_port : (Default: 8686 ) Port on the host to bind the service to. lidarr_domain : Domain/subdomain for the service. lidarr_directory : conf : Path on the host for persistent configurations. music : Path on the host of the Music library on disk. downloadclient : Path on the host of the download managers output directory.","title":"Variables"},{"location":"services/lidarr/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it.","title":"Setup"},{"location":"services/lidarr/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"services/lidarr/#configuring-jackett","text":"Reddit","title":"Configuring Jackett"},{"location":"services/lidarr/#configuring-transmission-as-the-download-client","text":"Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Lidarr container, you might have to specify a remote path mapping in the Download Client tab in Lidarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/","title":"Configuring Transmission as the download client"},{"location":"services/lidarr/#no-root-paths-on-ombi","text":"If no root paths appear on Ombi when trying to connect it to Lidarr, add them on Lidarr > Settings > Media Management > Root Folders.","title":"No root paths on Ombi"},{"location":"services/moodle/","text":"Moodle Moodle Open-source learning plataform. Variables moodle_docker_image : Name for the service docker image. moodle_domain : Domain/subdomain for the service. moodle_internal_web_port : (Default: 8082 ) Port on the host to bind the service to. moodle_git_repo : (Default: git://git.moodle.org/moodle.git ) Git repo to get Moodle from. moodle_git_repo_version : (Default: MOODLE_37_STABLE ) Release tag from the Moodle git repo. moodle_db_image : Postgres Docker image name for the database service. moodle_db_name: (Default: moodle ) Name for the database for this app. moodle_db_user : (Default: moodle ) Username for the database and the app. moodle_db_user_pass : Password for that user. moodle_directory : data : Path on the host for persistent data. db : Path on the host for persistent database data. html : Path on the host for persistent html data. Setup You must access the Moodle domain to configure it manually for the first time. The database host is moodle-db and uses the default Postgres port (5432).","title":"Moodle"},{"location":"services/moodle/#moodle","text":"Moodle Open-source learning plataform.","title":"Moodle"},{"location":"services/moodle/#variables","text":"moodle_docker_image : Name for the service docker image. moodle_domain : Domain/subdomain for the service. moodle_internal_web_port : (Default: 8082 ) Port on the host to bind the service to. moodle_git_repo : (Default: git://git.moodle.org/moodle.git ) Git repo to get Moodle from. moodle_git_repo_version : (Default: MOODLE_37_STABLE ) Release tag from the Moodle git repo. moodle_db_image : Postgres Docker image name for the database service. moodle_db_name: (Default: moodle ) Name for the database for this app. moodle_db_user : (Default: moodle ) Username for the database and the app. moodle_db_user_pass : Password for that user. moodle_directory : data : Path on the host for persistent data. db : Path on the host for persistent database data. html : Path on the host for persistent html data.","title":"Variables"},{"location":"services/moodle/#setup","text":"You must access the Moodle domain to configure it manually for the first time. The database host is moodle-db and uses the default Postgres port (5432).","title":"Setup"},{"location":"services/murmur/","text":"Murmur Murmur : Open source, low-latency, high quality voice chat software. Variables murmur_docker_image : Name for the service docker image. murmur_domain : Domain/subdomain for the service. murmur_port : (Default: 64738 ) Port on the host to bind the service to. murmur_directory : conf : Path on the host for configuration files. data : Path on the host for persistent data. log : Path on the host for logss. Ports (by default) 64738/tcp for the client connections. Configuration Murmur is configured via Mumble Client . Connect to your server. Enable Advanced options in Config > Settings in the lower left corner. Apply changes, close and right click on your user. Register yourself. Disconnect from the server and reconnect with SuperUser as user and its password. The password is generated on the server creation. You can see it on the logs or recreate it by deleting the database and restarting the service. Now, as SuperUser you can create permanent channels, sub-channels and edit ACLs. Once you finish, disconnect and reconnect as your normal user.","title":"Murmur"},{"location":"services/murmur/#murmur","text":"Murmur : Open source, low-latency, high quality voice chat software.","title":"Murmur"},{"location":"services/murmur/#variables","text":"murmur_docker_image : Name for the service docker image. murmur_domain : Domain/subdomain for the service. murmur_port : (Default: 64738 ) Port on the host to bind the service to. murmur_directory : conf : Path on the host for configuration files. data : Path on the host for persistent data. log : Path on the host for logss.","title":"Variables"},{"location":"services/murmur/#ports-by-default","text":"64738/tcp for the client connections.","title":"Ports (by default)"},{"location":"services/murmur/#configuration","text":"Murmur is configured via Mumble Client . Connect to your server. Enable Advanced options in Config > Settings in the lower left corner. Apply changes, close and right click on your user. Register yourself. Disconnect from the server and reconnect with SuperUser as user and its password. The password is generated on the server creation. You can see it on the logs or recreate it by deleting the database and restarting the service. Now, as SuperUser you can create permanent channels, sub-channels and edit ACLs. Once you finish, disconnect and reconnect as your normal user.","title":"Configuration"},{"location":"services/nextcloud/","text":"Nextcloud First user to register will be the admin user.","title":"Nextcloud"},{"location":"services/nextcloud/#nextcloud","text":"First user to register will be the admin user.","title":"Nextcloud"},{"location":"services/nfs/","text":"NFS Please refer to ubunut-help to see how NFSv4 works. Make sure to mount the directories you want to export inside the /export folder of the NFS container. Mount them with the :ro option if you want them to be read-only (and configure them in the exports conf accordingly). Ports 2049/tcp .","title":"NFS"},{"location":"services/nfs/#nfs","text":"Please refer to ubunut-help to see how NFSv4 works. Make sure to mount the directories you want to export inside the /export folder of the NFS container. Mount them with the :ro option if you want them to be read-only (and configure them in the exports conf accordingly).","title":"NFS"},{"location":"services/nfs/#ports","text":"2049/tcp .","title":"Ports"},{"location":"services/ombi/","text":"Ombi Ombi Want a Movie or TV Show on Plex or Emby? Use Ombi! Variables ombi_docker_image : Name for the service docker image. ombi_internal_web_port : (Default: 3579 ) Port on the host to bind the service to. ombi_domain : Domain/subdomain for the service. ombi_directory : conf : Path on the host for persistent configurations. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Troubleshooting Jellyfin connection Issue","title":"Ombi"},{"location":"services/ombi/#ombi","text":"Ombi Want a Movie or TV Show on Plex or Emby? Use Ombi!","title":"Ombi"},{"location":"services/ombi/#variables","text":"ombi_docker_image : Name for the service docker image. ombi_internal_web_port : (Default: 3579 ) Port on the host to bind the service to. ombi_domain : Domain/subdomain for the service. ombi_directory : conf : Path on the host for persistent configurations.","title":"Variables"},{"location":"services/ombi/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port.","title":"Setup"},{"location":"services/ombi/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"services/ombi/#jellyfin-connection","text":"Issue","title":"Jellyfin connection"},{"location":"services/openldap/","text":"OpenLDAP An OpenLDAP server for the internal services. Ports 636/tcp .","title":"OpenLDAP"},{"location":"services/openldap/#openldap","text":"An OpenLDAP server for the internal services.","title":"OpenLDAP"},{"location":"services/openldap/#ports","text":"636/tcp .","title":"Ports"},{"location":"services/openvpn/","text":"OpenVPN Ports 1194/udp . Usage Genereate new user keys docker exec -it openvpn easyrsa build-client-full [USERNAME] nopass Get the configuration file for an existing user docker exec -it openvpn ovpn_getclient [USERNAME] > [USERNAME].ovpn","title":"OpenVPN"},{"location":"services/openvpn/#openvpn","text":"","title":"OpenVPN"},{"location":"services/openvpn/#ports","text":"1194/udp .","title":"Ports"},{"location":"services/openvpn/#usage","text":"","title":"Usage"},{"location":"services/openvpn/#genereate-new-user-keys","text":"docker exec -it openvpn easyrsa build-client-full [USERNAME] nopass","title":"Genereate new user keys"},{"location":"services/openvpn/#get-the-configuration-file-for-an-existing-user","text":"docker exec -it openvpn ovpn_getclient [USERNAME] > [USERNAME].ovpn","title":"Get the configuration file for an existing user"},{"location":"services/phpldapadmin/","text":"phpLDAPadmin A web interface for managing OpenLDAP.","title":"phpLDAPadmin"},{"location":"services/phpldapadmin/#phpldapadmin","text":"A web interface for managing OpenLDAP.","title":"phpLDAPadmin"},{"location":"services/portainer/","text":"Portainer Portainer Making Docker management easy. Variables portainer_docker_image : Name for the service docker image. portainer_domain : Domain/subdomain for the service. portainer_internal_web_port : (Default: 3060 ) Port on the host to bind the service to. portainer_directory : data : Path on the host for persistent data.","title":"Portainer"},{"location":"services/portainer/#portainer","text":"Portainer Making Docker management easy.","title":"Portainer"},{"location":"services/portainer/#variables","text":"portainer_docker_image : Name for the service docker image. portainer_domain : Domain/subdomain for the service. portainer_internal_web_port : (Default: 3060 ) Port on the host to bind the service to. portainer_directory : data : Path on the host for persistent data.","title":"Variables"},{"location":"services/prosody/","text":"Prosody Prosody IM : A modern XMPP communication server. Variables prosody_docker_image : Name for the local service docker image. prosody_domain : Domain/subdomain for the service. prosody_domain_muc : Domain for the Multi User Chatrooms. prosody_domain_upload : Domain for the HTTP Upload. prosody_enable_muc : Boolean to enable or disable Multi User Chatrooms. prosody_enable_http : Boolean to enable or disable the HTTP module. prosody_enable_http_upload : Boolean to enable or disable the HTTP Uploads module. prosody_enable_tor : Boolean to enable or disable connection through TOR. prosody_tor_hostname : TOR domain (.onion). prosody_directory : conf : Path on the host for configurations. data : Path on the host for data. modules_community : Path on the host for community modules. modules_custom : Path on the host for custom modules. prosody_cert_path : privkey : Path on the host for the SSL/TLS private key. cert : Path on the host for the SSL/TLS certificate. prosody_port_c2s : Port for client to client connections. prosody_port_s2s : Port for server to server connections. prosody_port_internal_http : Internal in the Docker for serving http. prosody_port_external_https : External port of the host to serve https (for Prosody). prosody_iptables_c2s_rule : Iptables rule for the c2c connections. prosody_iptables_s2s_rule : Iptables rule for the s2s connections. prosody_iptables_https_rule : Iptables rule for the https connections to Prosody. prosody_admins_xmpp : List of admins of the XMPP server. prosody_allow_remote_registration : Boolean to enable or disable remote registration. prosody_users : List of dictionaries with jid and pass values for the users to register. Ports (by default) 5222/tcp for c2c connections. 5269/tcp for s2s connections. 5281/tcp for HTTPS connections.","title":"Prosody"},{"location":"services/prosody/#prosody","text":"Prosody IM : A modern XMPP communication server.","title":"Prosody"},{"location":"services/prosody/#variables","text":"prosody_docker_image : Name for the local service docker image. prosody_domain : Domain/subdomain for the service. prosody_domain_muc : Domain for the Multi User Chatrooms. prosody_domain_upload : Domain for the HTTP Upload. prosody_enable_muc : Boolean to enable or disable Multi User Chatrooms. prosody_enable_http : Boolean to enable or disable the HTTP module. prosody_enable_http_upload : Boolean to enable or disable the HTTP Uploads module. prosody_enable_tor : Boolean to enable or disable connection through TOR. prosody_tor_hostname : TOR domain (.onion). prosody_directory : conf : Path on the host for configurations. data : Path on the host for data. modules_community : Path on the host for community modules. modules_custom : Path on the host for custom modules. prosody_cert_path : privkey : Path on the host for the SSL/TLS private key. cert : Path on the host for the SSL/TLS certificate. prosody_port_c2s : Port for client to client connections. prosody_port_s2s : Port for server to server connections. prosody_port_internal_http : Internal in the Docker for serving http. prosody_port_external_https : External port of the host to serve https (for Prosody). prosody_iptables_c2s_rule : Iptables rule for the c2c connections. prosody_iptables_s2s_rule : Iptables rule for the s2s connections. prosody_iptables_https_rule : Iptables rule for the https connections to Prosody. prosody_admins_xmpp : List of admins of the XMPP server. prosody_allow_remote_registration : Boolean to enable or disable remote registration. prosody_users : List of dictionaries with jid and pass values for the users to register.","title":"Variables"},{"location":"services/prosody/#ports-by-default","text":"5222/tcp for c2c connections. 5269/tcp for s2s connections. 5281/tcp for HTTPS connections.","title":"Ports (by default)"},{"location":"services/radarr/","text":"Radarr Radarr A fork of Sonarr to work with movies \u00e0 la Couchpotato. Variables radarr_docker_image : Name for the service docker image. radarr_internal_web_port : (Default: 7878 ) Port on the host to bind the service to. radarr_domain : Domain/subdomain for the service. radarr_directory : conf : Path on the host for persistent configurations. movies : Path on the host of the Movie library on disk. downloadclient : Path on the host of the download managers output directory. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it. Troubleshooting Configuring Jackett Reddit Configuring Transmission as the download client Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Radarr container, you might have to specify a remote path mapping in the Download Client tab in Radarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/ No root paths on Ombi If no root paths appear on Ombi when trying to connect it to Radarr, try to search for a movie on Radarr and add a path by browsing /movies . Reference Setup Guide","title":"Radarr"},{"location":"services/radarr/#radarr","text":"Radarr A fork of Sonarr to work with movies \u00e0 la Couchpotato.","title":"Radarr"},{"location":"services/radarr/#variables","text":"radarr_docker_image : Name for the service docker image. radarr_internal_web_port : (Default: 7878 ) Port on the host to bind the service to. radarr_domain : Domain/subdomain for the service. radarr_directory : conf : Path on the host for persistent configurations. movies : Path on the host of the Movie library on disk. downloadclient : Path on the host of the download managers output directory.","title":"Variables"},{"location":"services/radarr/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it.","title":"Setup"},{"location":"services/radarr/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"services/radarr/#configuring-jackett","text":"Reddit","title":"Configuring Jackett"},{"location":"services/radarr/#configuring-transmission-as-the-download-client","text":"Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Radarr container, you might have to specify a remote path mapping in the Download Client tab in Radarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/","title":"Configuring Transmission as the download client"},{"location":"services/radarr/#no-root-paths-on-ombi","text":"If no root paths appear on Ombi when trying to connect it to Radarr, try to search for a movie on Radarr and add a path by browsing /movies .","title":"No root paths on Ombi"},{"location":"services/radarr/#reference","text":"Setup Guide","title":"Reference"},{"location":"services/radicale/","text":"Radicale You must set radicale_pass with your bcrypted password. Yo can get the hash by running: htpasswd -B /tmp/radicale [ user ] And then read it from /tmp/radicale .","title":"Radicale"},{"location":"services/radicale/#radicale","text":"You must set radicale_pass with your bcrypted password. Yo can get the hash by running: htpasswd -B /tmp/radicale [ user ] And then read it from /tmp/radicale .","title":"Radicale"},{"location":"services/registry/","text":"Registry Docker Registry : A stateless, highly scalable server side application that stores and lets you distribute Docker images. Variables registry_domain : Domain/subdomain for the service. registry_docker_image : Name for the service docker image. registry_directory : data : Path on the host for persistent data. registry_internal_web_port : (Default: 5000 ) Port on the host to bind the service to. registry_user : Username for HTTP auth. registry_pass : Password for that user.","title":"Registry"},{"location":"services/registry/#registry","text":"Docker Registry : A stateless, highly scalable server side application that stores and lets you distribute Docker images.","title":"Registry"},{"location":"services/registry/#variables","text":"registry_domain : Domain/subdomain for the service. registry_docker_image : Name for the service docker image. registry_directory : data : Path on the host for persistent data. registry_internal_web_port : (Default: 5000 ) Port on the host to bind the service to. registry_user : Username for HTTP auth. registry_pass : Password for that user.","title":"Variables"},{"location":"services/registry_web_interface/","text":"Registry web interface Jessfraz Docker registry web interface : Docker registry v2 command line client and repo listing generator with security checks. Variables registry_web_interface_domain : Domain/subdomain for the service. registry_web_interface_docker_image : Name for the service docker image. registry_web_interface_internal_web_port : (Default: 4080 ) Port on the host to bind the service to. registry_web_interface_enable_clair : Boolean value to enable support of CoreOS Clair (must be deployed beforehand). registry_web_interface_registry_url : URL of the Docker registry. registry_web_interface_registry_user : Username for HTTP auth of the Docker registry. registry_web_interface_registry_pass : Password for that user.","title":"Registry web interface"},{"location":"services/registry_web_interface/#registry-web-interface","text":"Jessfraz Docker registry web interface : Docker registry v2 command line client and repo listing generator with security checks.","title":"Registry web interface"},{"location":"services/registry_web_interface/#variables","text":"registry_web_interface_domain : Domain/subdomain for the service. registry_web_interface_docker_image : Name for the service docker image. registry_web_interface_internal_web_port : (Default: 4080 ) Port on the host to bind the service to. registry_web_interface_enable_clair : Boolean value to enable support of CoreOS Clair (must be deployed beforehand). registry_web_interface_registry_url : URL of the Docker registry. registry_web_interface_registry_user : Username for HTTP auth of the Docker registry. registry_web_interface_registry_pass : Password for that user.","title":"Variables"},{"location":"services/rstudio/","text":"RStudio RStudio provides popular open source and enterprise-ready professional software for the R statistical computing environment. Variables rstudio_domain : Domain/subdomain for the service. rstudio_docker_image : Name for the service docker image. rstudio_user : (Default: rstudio ) Default user for the web service. rstudio_pass : Password for that user. rstudio_directory : data : Path on the host for persistent data. rstudio_cpus_limit : (Default: 2 ) Limit of the CPUs used by the container. rstudio_memory_limit : (Default: 3gb ) Limit of the memory available to the container. rstudio_internal_web_port : (Default: 8787 ) Port on the host to bind the service to.","title":"RStudio"},{"location":"services/rstudio/#rstudio","text":"RStudio provides popular open source and enterprise-ready professional software for the R statistical computing environment.","title":"RStudio"},{"location":"services/rstudio/#variables","text":"rstudio_domain : Domain/subdomain for the service. rstudio_docker_image : Name for the service docker image. rstudio_user : (Default: rstudio ) Default user for the web service. rstudio_pass : Password for that user. rstudio_directory : data : Path on the host for persistent data. rstudio_cpus_limit : (Default: 2 ) Limit of the CPUs used by the container. rstudio_memory_limit : (Default: 3gb ) Limit of the memory available to the container. rstudio_internal_web_port : (Default: 8787 ) Port on the host to bind the service to.","title":"Variables"},{"location":"services/sharelatex/","text":"ShareLatex ShareLatex A web-based collaborative LaTeX editor. Variables sharelatex_docker_image : Name for the service docker image. sharelatex_internal_web_port : (Default: 3080 ) Port on the host to bind the service to. sharelatex_domain : Domain/subdomain for the service. sharelatex_network_name : (Default: sharelatex ) Name for the Docker network for the service and its required containers. sharelatex_app_name : (Default: ShareLatex ) App name for the website. sharelatex_directory_www_data : data : Path on the host for persistent data. sharelatex_directory : db : Path on the host for the database data directory. redis : Path on the host for persistent redis files. DB sharelatex_db_image : Mongo Docker image name for the database service. sharelatex_db_service_name : (Default: sharelatex-db ) Name for the database service. sharelatex_db_user : (Default: sharelatex ) Username for the database and the app. sharelatex_db_user_pass : Password for that user. sharelatex_db_name : (Default: sharelatex ) Name for the database for this app. Redis sharelatex_redis_image : Redis Docker image name. LDAP support Unfortunately, LDAP is not supported in the community version. Setup Deploy the service. Optionally, install all of TeXLive packages with: docker exec sharelatex tlmgr install scheme-full Alternatively you can install packages manually as you need by replacing scheme-full with the package name. 1. Create the admin user account by visiting /launchpad on the site or use the following command: docker exec sharelatex /bin/bash -c \"cd /var/www/sharelatex; grunt user:create-admin --email=joe@example.com\" Once this is done, regular users can be created from /admin/register . Reference Quick Start Guide \u00b7 overleaf/overleaf Wiki","title":"ShareLatex"},{"location":"services/sharelatex/#sharelatex","text":"ShareLatex A web-based collaborative LaTeX editor.","title":"ShareLatex"},{"location":"services/sharelatex/#variables","text":"sharelatex_docker_image : Name for the service docker image. sharelatex_internal_web_port : (Default: 3080 ) Port on the host to bind the service to. sharelatex_domain : Domain/subdomain for the service. sharelatex_network_name : (Default: sharelatex ) Name for the Docker network for the service and its required containers. sharelatex_app_name : (Default: ShareLatex ) App name for the website. sharelatex_directory_www_data : data : Path on the host for persistent data. sharelatex_directory : db : Path on the host for the database data directory. redis : Path on the host for persistent redis files.","title":"Variables"},{"location":"services/sharelatex/#db","text":"sharelatex_db_image : Mongo Docker image name for the database service. sharelatex_db_service_name : (Default: sharelatex-db ) Name for the database service. sharelatex_db_user : (Default: sharelatex ) Username for the database and the app. sharelatex_db_user_pass : Password for that user. sharelatex_db_name : (Default: sharelatex ) Name for the database for this app.","title":"DB"},{"location":"services/sharelatex/#redis","text":"sharelatex_redis_image : Redis Docker image name.","title":"Redis"},{"location":"services/sharelatex/#ldap-support","text":"Unfortunately, LDAP is not supported in the community version.","title":"LDAP support"},{"location":"services/sharelatex/#setup","text":"Deploy the service. Optionally, install all of TeXLive packages with: docker exec sharelatex tlmgr install scheme-full Alternatively you can install packages manually as you need by replacing scheme-full with the package name. 1. Create the admin user account by visiting /launchpad on the site or use the following command: docker exec sharelatex /bin/bash -c \"cd /var/www/sharelatex; grunt user:create-admin --email=joe@example.com\" Once this is done, regular users can be created from /admin/register .","title":"Setup"},{"location":"services/sharelatex/#reference","text":"Quick Start Guide \u00b7 overleaf/overleaf Wiki","title":"Reference"},{"location":"services/sonarr/","text":"Sonarr Sonarr API Support for your favorite torrent trackers. Variables sonarr_docker_image : Name for the service docker image. sonarr_internal_web_port : (Default: 8989 ) Port on the host to bind the service to. sonarr_domain : Domain/subdomain for the service. sonarr_directory : conf : Path on the host for persistent configurations. tvseries : Path on the host of the TV library on disk. downloadclient : Path on the host of the download managers output directory. Setup Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it. Troubleshooting Configuring Jackett Reddit Configuring Transmission as the download client Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Sonarr container, you might have to specify a remote path mapping in the Download Client tab in Sonarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/","title":"Sonarr"},{"location":"services/sonarr/#sonarr","text":"Sonarr API Support for your favorite torrent trackers.","title":"Sonarr"},{"location":"services/sonarr/#variables","text":"sonarr_docker_image : Name for the service docker image. sonarr_internal_web_port : (Default: 8989 ) Port on the host to bind the service to. sonarr_domain : Domain/subdomain for the service. sonarr_directory : conf : Path on the host for persistent configurations. tvseries : Path on the host of the TV library on disk. downloadclient : Path on the host of the download managers output directory.","title":"Variables"},{"location":"services/sonarr/#setup","text":"Deploy the service. Access it through its web interface and set the admin password without changing the port. Configure it.","title":"Setup"},{"location":"services/sonarr/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"services/sonarr/#configuring-jackett","text":"Reddit","title":"Configuring Jackett"},{"location":"services/sonarr/#configuring-transmission-as-the-download-client","text":"Since the route where Transmission downloads the files in its container might not be the same as the mount point of that directory on the Sonarr container, you might have to specify a remote path mapping in the Download Client tab in Sonarr's settings such as: Host Remote Path Local Path torrent.anarres.local /data/complete/ /downloads/","title":"Configuring Transmission as the download client"},{"location":"services/syncthing/","text":"Syncthing Make sure to set up a user and password for the web GUI. You can do that by accesing the web GUI and going to settings. Ports 22000/tcp as the listening address. 21027/udp for local discovery.","title":"Syncthing"},{"location":"services/syncthing/#syncthing","text":"Make sure to set up a user and password for the web GUI. You can do that by accesing the web GUI and going to settings.","title":"Syncthing"},{"location":"services/syncthing/#ports","text":"22000/tcp as the listening address. 21027/udp for local discovery.","title":"Ports"},{"location":"services/taiga/","text":"Taiga Taiga : Project management platform for agile developers & designers and project managers. Variables taiga_domain : Domain/subdomain for the service. taiga_docker_repo : (Default: https://github.com/m0wer/docker-taiga ) Git repo containing the Dockerfile . taiga_docker_image : (Default: local/taiga ) Name for the local service docker image. taiga_internal_web_port : (Default: 3050 ) Internal port on the host to bind the web interface to. taiga_secret_key : Random string. Defines the secret key used internally by Taiga. taiga_path_dockerfile : Path to the directory containing the Dockerfile . taiga_directory.media: Path on the host for uploads. taiga_directory.db : Path on the host for the database data directory. taiga_db_image : Postgres Docker image name for the database service. taiga_db_service_name : (Default: taiga-db ) Name for the database service. taiga_db_name : (Default: taiga`) Name for the database for this app. taiga_db_user : (Default: taiga ) Username for the database and the app. taiga_db_user_pass : Password for that user. taiga_default_from_email : Default \"from\" email address for notifications. taiga_email_backend : Backend for sending emails (default: django.core.mail.backends.smtp.EmailBackend ). taiga_email_use_tls : Boolean to use or not TLS with the email server (default: false ). taiga_email_use_ssl : Boolean to use or not SSL with the email server (default: false ). taiga_email_host : Email server host (default: localhost ). taiga_email_port : Email server port (default: 25 ). taiga_email_host_user : Email server user, if login is required. taiga_email_host_password : Email server password, if login is required. taiga_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. taiga_ldap_server : LDAP server address. Include ldaps:// at the begining. (Example: ldaps://anarres.local ) taiga_ldap_port : LDAP port. taiga_ldap_bind_dn : Bind DN to use to login to the LDAP server. taiga_ldap_bindc_redentials : Password for that account. taiga_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) taiga_ldap_search_property : (Default: uid ) The LDAP field which is used uniquely identify a user on Taiga. taiga_ldap_email_attribute : (Default: mail ) The LDAP field which is used as the email address. taiga_ldap_full_name_attribute : (Default: cn ) The LDAP field which is used as the full name on Taiga.","title":"Taiga"},{"location":"services/taiga/#taiga","text":"Taiga : Project management platform for agile developers & designers and project managers.","title":"Taiga"},{"location":"services/taiga/#variables","text":"taiga_domain : Domain/subdomain for the service. taiga_docker_repo : (Default: https://github.com/m0wer/docker-taiga ) Git repo containing the Dockerfile . taiga_docker_image : (Default: local/taiga ) Name for the local service docker image. taiga_internal_web_port : (Default: 3050 ) Internal port on the host to bind the web interface to. taiga_secret_key : Random string. Defines the secret key used internally by Taiga. taiga_path_dockerfile : Path to the directory containing the Dockerfile . taiga_directory.media: Path on the host for uploads. taiga_directory.db : Path on the host for the database data directory. taiga_db_image : Postgres Docker image name for the database service. taiga_db_service_name : (Default: taiga-db ) Name for the database service. taiga_db_name : (Default: taiga`) Name for the database for this app. taiga_db_user : (Default: taiga ) Username for the database and the app. taiga_db_user_pass : Password for that user. taiga_default_from_email : Default \"from\" email address for notifications. taiga_email_backend : Backend for sending emails (default: django.core.mail.backends.smtp.EmailBackend ). taiga_email_use_tls : Boolean to use or not TLS with the email server (default: false ). taiga_email_use_ssl : Boolean to use or not SSL with the email server (default: false ). taiga_email_host : Email server host (default: localhost ). taiga_email_port : Email server port (default: 25 ). taiga_email_host_user : Email server user, if login is required. taiga_email_host_password : Email server password, if login is required. taiga_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. taiga_ldap_server : LDAP server address. Include ldaps:// at the begining. (Example: ldaps://anarres.local ) taiga_ldap_port : LDAP port. taiga_ldap_bind_dn : Bind DN to use to login to the LDAP server. taiga_ldap_bindc_redentials : Password for that account. taiga_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local ) taiga_ldap_search_property : (Default: uid ) The LDAP field which is used uniquely identify a user on Taiga. taiga_ldap_email_attribute : (Default: mail ) The LDAP field which is used as the email address. taiga_ldap_full_name_attribute : (Default: cn ) The LDAP field which is used as the full name on Taiga.","title":"Variables"},{"location":"services/taskd/","text":"Taskd The taskwarrior server. Ports 53589/tcp . Setup Open a shell in the container. docker exec -it taskd /bin/sh And then from inside the container run the commands from the taskwarrior docs . Note : The pki directory is in /var/taskd/pki/","title":"Taskd"},{"location":"services/taskd/#taskd","text":"The taskwarrior server.","title":"Taskd"},{"location":"services/taskd/#ports","text":"53589/tcp .","title":"Ports"},{"location":"services/taskd/#setup","text":"Open a shell in the container. docker exec -it taskd /bin/sh And then from inside the container run the commands from the taskwarrior docs . Note : The pki directory is in /var/taskd/pki/","title":"Setup"},{"location":"services/transmision/","text":"Tranmission It's recommended to enable port forwarding in your router as explained in superuser . If you don't set tranmission_user and transmission_pass you'll need to edit settings.json as explained in hub.docker.com Ports 51413 tcp and upd for p2p connections.","title":"Tranmission"},{"location":"services/transmision/#tranmission","text":"It's recommended to enable port forwarding in your router as explained in superuser . If you don't set tranmission_user and transmission_pass you'll need to edit settings.json as explained in hub.docker.com","title":"Tranmission"},{"location":"services/transmision/#ports","text":"51413 tcp and upd for p2p connections.","title":"Ports"},{"location":"services/transmision_openvpn/","text":"Transmission-OpenVPN docker-transmission-openvpn Docker container running Transmission torrent client with WebUI over an OpenVPN tunnel. Variables transmission_openvpn_domain : Domain/subdomain for the service. transmission_openvpn_docker_image : Name for the local service docker image (default: haugene/transmission-openvpn:[version] ). transmission_openvpn_internal_web_port : Internal port on the host to bind the web interface to (default: 9091 ). transmission_openvpn_peer_port: Openvpn p2p port (default: 51413 ). transmission_openvpn_dns : DNS server to use inside the container (default: 1.1.1.1 ). transmission_openvpn_vpn : provider : Provider name. conf : Sets the OpenVPN endpoint to connect to. user : Your OpenVPN username. pass : Your OpenVPN password. transmission_openvpn_rpc : user: User for the web interface. pass : Password for the web interface. transmission_openvpn_directory : data : Path on the host for the downloads. transmission_openvpn_extra_env : List of extra environment variables to pass to the container. You can get some ideas from the Dockerfile . For more info about how to choose the variables, please refer to the docs .","title":"Transmission-OpenVPN"},{"location":"services/transmision_openvpn/#transmission-openvpn","text":"docker-transmission-openvpn Docker container running Transmission torrent client with WebUI over an OpenVPN tunnel.","title":"Transmission-OpenVPN"},{"location":"services/transmision_openvpn/#variables","text":"transmission_openvpn_domain : Domain/subdomain for the service. transmission_openvpn_docker_image : Name for the local service docker image (default: haugene/transmission-openvpn:[version] ). transmission_openvpn_internal_web_port : Internal port on the host to bind the web interface to (default: 9091 ). transmission_openvpn_peer_port: Openvpn p2p port (default: 51413 ). transmission_openvpn_dns : DNS server to use inside the container (default: 1.1.1.1 ). transmission_openvpn_vpn : provider : Provider name. conf : Sets the OpenVPN endpoint to connect to. user : Your OpenVPN username. pass : Your OpenVPN password. transmission_openvpn_rpc : user: User for the web interface. pass : Password for the web interface. transmission_openvpn_directory : data : Path on the host for the downloads. transmission_openvpn_extra_env : List of extra environment variables to pass to the container. You can get some ideas from the Dockerfile . For more info about how to choose the variables, please refer to the docs .","title":"Variables"},{"location":"services/wikijs/","text":"Wiki.js Wiki.js : A modern, lightweight and powerful wiki app built on Node.js. Variables wikijs_domain : Domain/subdomain for the service. wikijs_network_name : Name for the docker network between the service and its database. wikijs_docker_image : (Default: requarks/wiki ) Name for the local service docker image. wikijs_internal_web_port : (Default: 3060 ) Internal port on the host to bind the web interface to. wikijs_directory.conf: Path on the host for configuration files. wikijs_directory.db : Path on the host for the database data directory. wikijs_db_image : Mongo Docker image name for the database service. wikijs_db_service_name : (Default: wikijs-db ) Name for the database service. wikijs_db_name : (Default: wikijs`) Name for the database for this app. wikijs_db_user : (Default: wikijs ) Username for the database and the app. wikijs_db_user_pass : Password for that user. wikijs_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. wikijs_ldap_url : LDAP server address. Include ldaps:// at the begining and the port at the end. (Example: ldaps://anarres.local:636 ) wikijs_ldap_bind_dn : Bind DN to use to login to the LDAP server. wikijs_ldap_bind_credentials : Password for that account. wikijs_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local )","title":"Wiki.js"},{"location":"services/wikijs/#wikijs","text":"Wiki.js : A modern, lightweight and powerful wiki app built on Node.js.","title":"Wiki.js"},{"location":"services/wikijs/#variables","text":"wikijs_domain : Domain/subdomain for the service. wikijs_network_name : Name for the docker network between the service and its database. wikijs_docker_image : (Default: requarks/wiki ) Name for the local service docker image. wikijs_internal_web_port : (Default: 3060 ) Internal port on the host to bind the web interface to. wikijs_directory.conf: Path on the host for configuration files. wikijs_directory.db : Path on the host for the database data directory. wikijs_db_image : Mongo Docker image name for the database service. wikijs_db_service_name : (Default: wikijs-db ) Name for the database service. wikijs_db_name : (Default: wikijs`) Name for the database for this app. wikijs_db_user : (Default: wikijs ) Username for the database and the app. wikijs_db_user_pass : Password for that user. wikijs_enable_ldap : (Default: true ) Boolean to enable or disable the LDAP logging ability. wikijs_ldap_url : LDAP server address. Include ldaps:// at the begining and the port at the end. (Example: ldaps://anarres.local:636 ) wikijs_ldap_bind_dn : Bind DN to use to login to the LDAP server. wikijs_ldap_bind_credentials : Password for that account. wikijs_ldap_search_base : Where to find the users for this service of the LDAP organization. (Example: ou=users,dc=anarres,dc=local )","title":"Variables"}]}